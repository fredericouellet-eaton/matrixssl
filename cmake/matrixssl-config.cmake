# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget MatrixSSL::Core MatrixSSL::Crypto MatrixSSL::Ssl)  
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target MatrixSSL::Core
add_library(MatrixSSL::Core STATIC IMPORTED)

set_target_properties(MatrixSSL::Core PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "HAVE_MATRIXSSL_CORE=1;HAVE_LIB_MATRIXSSL_CORE=1;NO_MULTITHREADING=1;MATRIXSSL_NO_AESNI=1"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/matrixssl"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:core_s>"
)

# Create imported target MatrixSSL::Crypto
add_library(MatrixSSL::Crypto STATIC IMPORTED)
target_link_libraries(MatrixSSL::Crypto INTERFACE MatrixSSL::Core)
set_target_properties(MatrixSSL::Crypto PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "HAVE_MATRIXSSL_CRYPTO=1;HAVE_LIB_MATRIXSSL_CRYPTO=1;NO_MULTITHREADING=1;MATRIXSSL_NO_AESNI=1"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/matrixssl"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:crypt_s>"
)

# Create imported target MatrixSSL::Ssl
add_library(MatrixSSL::Ssl STATIC IMPORTED)
target_link_libraries(MatrixSSL::Core INTERFACE MatrixSSL::Core)
set_target_properties(MatrixSSL::Ssl PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "HAVE_MATRIXSSL_SSL=1;HAVE_LIB_MATRIXSSL_SSL=1;NO_MULTITHREADING=1;MATRIXSSL_NO_AESNI=1"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/matrixssl"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:ssl_s>"
)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/matrixssl-config-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

include(CheckCCompilerFlag)

check_c_compiler_flag("-maes" SUPPORT_AES)
if (SUPPORT_AES)
	target_compile_options(MatrixSSL::Core INTERFACE "-maes")
	target_compile_options(MatrixSSL::Crypto INTERFACE "-maes")
	target_compile_options(MatrixSSL::Ssl INTERFACE "-maes")
endif()

# if (NOT ARM AND NOT PPC64LE)
# 	message(STATUS "AES support enabled")
# 	#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -maes")
# 	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -maes")
# 	target_compile_options(MatrixSSL::Core INTERFACE "-maes")
# 	target_compile_options(MatrixSSL::Crypto INTERFACE "-maes")
# 	target_compile_options(MatrixSSL::Ssl INTERFACE "-maes")
# elseif (PPC64LE)
# 	message(STATUS "AES support not available on ppc64le")
# elseif (ARM6)
# 	message(STATUS "AES support not available on ARMv6")
# elseif (ARM7)
# 	message(STATUS "AES support not available on ARMv7")
# elseif (ARM8)
# 	CHECK_CXX_ACCEPTS_FLAG("-march=${ARCH}+crypto" ARCH_PLUS_CRYPTO)
# 	if (ARCH_PLUS_CRYPTO)
# 		message(STATUS "Crypto extensions enabled for ARMv8")
# 		#set(ARCH_FLAG "-march=${ARCH}+crypto")
# 		target_compile_options(MatrixSSL::Core INTERFACE "-march=${ARCH}+crypto")
# 		target_compile_options(MatrixSSL::Crypto INTERFACE "-march=${ARCH}+crypto")
# 		target_compile_options(MatrixSSL::Ssl INTERFACE "-march=${ARCH}+crypto")
# 	else()
# 		message(STATUS "Crypto extensions unavailable on your ARMv8 device")
# 	endif()
# else()
#   message(STATUS "AES support disabled")
# endif()

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
